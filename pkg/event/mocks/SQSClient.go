// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	request "github.com/aws/aws-sdk-go/aws/request"
	mock "github.com/stretchr/testify/mock"

	sqs "github.com/aws/aws-sdk-go/service/sqs"
)

// SQSClient is an autogenerated mock type for the SQSClient type
type SQSClient struct {
	mock.Mock
}

// DeleteMessage provides a mock function with given fields: input
func (_m *SQSClient) DeleteMessage(input *sqs.DeleteMessageInput) (*sqs.DeleteMessageOutput, error) {
	ret := _m.Called(input)

	var r0 *sqs.DeleteMessageOutput
	if rf, ok := ret.Get(0).(func(*sqs.DeleteMessageInput) *sqs.DeleteMessageOutput); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.DeleteMessageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sqs.DeleteMessageInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMessageRequest provides a mock function with given fields: input
func (_m *SQSClient) DeleteMessageRequest(input *sqs.DeleteMessageInput) (*request.Request, *sqs.DeleteMessageOutput) {
	ret := _m.Called(input)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sqs.DeleteMessageInput) *request.Request); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sqs.DeleteMessageOutput
	if rf, ok := ret.Get(1).(func(*sqs.DeleteMessageInput) *sqs.DeleteMessageOutput); ok {
		r1 = rf(input)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sqs.DeleteMessageOutput)
		}
	}

	return r0, r1
}

// GetQueueUrl provides a mock function with given fields: input
func (_m *SQSClient) GetQueueUrl(input *sqs.GetQueueUrlInput) (*sqs.GetQueueUrlOutput, error) {
	ret := _m.Called(input)

	var r0 *sqs.GetQueueUrlOutput
	if rf, ok := ret.Get(0).(func(*sqs.GetQueueUrlInput) *sqs.GetQueueUrlOutput); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.GetQueueUrlOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sqs.GetQueueUrlInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueueUrlRequest provides a mock function with given fields: input
func (_m *SQSClient) GetQueueUrlRequest(input *sqs.GetQueueUrlInput) (*request.Request, *sqs.GetQueueUrlOutput) {
	ret := _m.Called(input)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sqs.GetQueueUrlInput) *request.Request); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sqs.GetQueueUrlOutput
	if rf, ok := ret.Get(1).(func(*sqs.GetQueueUrlInput) *sqs.GetQueueUrlOutput); ok {
		r1 = rf(input)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sqs.GetQueueUrlOutput)
		}
	}

	return r0, r1
}

// NewRequest provides a mock function with given fields: operation, params, data
func (_m *SQSClient) NewRequest(operation *request.Operation, params interface{}, data interface{}) *request.Request {
	ret := _m.Called(operation, params, data)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*request.Operation, interface{}, interface{}) *request.Request); ok {
		r0 = rf(operation, params, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	return r0
}

// ReceiveMessage provides a mock function with given fields: input
func (_m *SQSClient) ReceiveMessage(input *sqs.ReceiveMessageInput) (*sqs.ReceiveMessageOutput, error) {
	ret := _m.Called(input)

	var r0 *sqs.ReceiveMessageOutput
	if rf, ok := ret.Get(0).(func(*sqs.ReceiveMessageInput) *sqs.ReceiveMessageOutput); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.ReceiveMessageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sqs.ReceiveMessageInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceiveMessageRequest provides a mock function with given fields: input
func (_m *SQSClient) ReceiveMessageRequest(input *sqs.ReceiveMessageInput) (*request.Request, *sqs.ReceiveMessageOutput) {
	ret := _m.Called(input)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sqs.ReceiveMessageInput) *request.Request); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sqs.ReceiveMessageOutput
	if rf, ok := ret.Get(1).(func(*sqs.ReceiveMessageInput) *sqs.ReceiveMessageOutput); ok {
		r1 = rf(input)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sqs.ReceiveMessageOutput)
		}
	}

	return r0, r1
}
